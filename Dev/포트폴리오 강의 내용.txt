포트폴리오란?
자신의 IT 능력을 보여줄 수 있는 가장 효과적인 도구
프로젝트를 통해 문제를 다뤄보고 해결한 경험을 나태내는 게 필수
가독성 > 집약적 > 이미지 > 아이콘 > 시각화


희망직무를 수행하기 위해 준비한 기술력, 프로젝트 경험 등 자신의 역량을 보여주기 위한 매개체
프로젝트 전반적인 소개와 개요(아키텍쳐) - 5 / 나의 역할, 기여 - 5
결과를 시각적 구체적으로 보여주기
이력서&자소서는 과거/현재/미래를 담는다면, 포트폴리오는 과정을 나타낸다.


이력서 = 정량평가 / 포트폴리오 = 정성평가
신입개발자는 스펙보다 '개발실력, 잠재력' = 성장가능성이 더 중요
직무 유사 경험인 프로젝트 경험을 어필하여 현업에 필요한 역량을 어필
- 팀 프로젝트: 협업역량, 리더 or 팔로워 역량
- 개인 프로젝트: 기술적 성장


프로젝트 꼬리 질문
- 기억남는/최근 프로젝트
- 본인 역할
- 기여도
- 프로젝트 사용 언어/프레임워크/라이브러리
- 힘들었던 일(기술적) - 극복
- 갈등상황 - 해결
- 프로젝트를 통해 알게 된 점, 느낀 점
- 배운 것들을 회사에 적용/기여


포트폴리오 작성 팁
1. 포트폴리오에 담겨져야 할 프로젝트의 핵심 포인트
- 목적이 무엇인가? 이걸 왜 하는 것인가?: 프로젝트 하기 전
- 이 문제를 어떻게 해결했는가?: 프로젝트 중
- 그 결과는 어떻게 되었는가?: 프로젝트 종료 후
2. 중요한 것은 프로젝트의 '목적'이다.
- 협업 목적: 초반부터 협업 과정을 문서화하여 잘 쌓아두고 첨부
- 서비스 개발 목적: 배포까지 해서 유저의 반응을 살펴보고 유지 보수 진행
- 개발 성장 목적: 코드에서 역할과 의도 명확하게 드러나야하고 블로그 등에 고민의 과정 정리
3. 프로젝트 개수가 중요할까?
- 목적 없는 10개보다 목적 명확한 1개가 더 좋음
- 1~2개로도 충분히 가능성을 증명 해 낼 수 있음
- 미완성 프로젝트에서도 어필할 수 있는 포인트가 있다면 포함 시켜도 됨(성공 시키려고 했던 노력, 핵심 문제를 짚어내는 능력 등)
4. 포트폴리오에 '보기 좋게' 담는 것이 매우 중요하다!
- 아무지 잘 만든 프로젝트, 잘 짠 코드라도 보는 사람이 이해하지 못하면 안됨, 가독성이 가장 중요
- 스크린샷, 영상, 움짤 등 활용해/ 영상, 움짤 작동 확인
- 구현기능에 대한 주요설명


주의사항
1. 프로젝트 발표 자료 그대로 붙이지 않기
2. 중요한 것부터 배치하기
3. 지원자 개발능력 중심
4. 예쁘게 꾸미려고 하지말고 가독성 있게 작성하는 것이 최고
5. 서술식 보다는 개조식으로 작성하기


구성요소
인사
1.프로필/자기소개/Resume
2.Skills/기술스택/강점
3.프로젝트 소개
감사합니다

3-1. 프로젝트 개요 - 기간, 참여인원, 프로젝트 소개, 주요 내용(목적, 대상, 핵심기능), 사용기술, 개발환경, 역할, 구현기능, 링크 등
3-2. 프로세스(홈페이지 구조, ERD("Entity Relationship Diagram"), 시스템 설계 등)
3-3. 핵심코드(필수 x) - 주석을 달거나 어떤 부분을 중점으로 짰는지 부연설명 필요
3-4. 구현한 기능 - 구현부분 스크린샷 첨부, 스크린샷 명칭 달기, 부연설명: 선정 기술, 어필하고 싶은 개발 내용 작성 등
	- 어떤 걸 중점으로 구현했는지 작성한다.
	- 해당기능을 개발한 과정을 요약하여 작성한다.
	- 해당 기술스택을 사용한 이유를 작성하면 좋다
3-5. 결과(성과) - 프로젝트 최종 결과, 정량적/정성적 프로젝트 성과, 기술적 성과 위주로 작성
3-6. 리뷰 - 프로젝트를 통해 배운 점, 아쉬웠던 점(회사 관점에서,,)과 앞으로의 보완 계획 등 작성 -> 5, 6은 합쳐서 가능


직무별 포트폴리오 구성
- 프론트엔드 
1. 디자인, 화면 구성
2. UX/UI를 구현하기 위해 사용한 언어, 기술 등

- 백엔드
1. REST API 설계, 데이터베이스, 서버 관리, 백엔드 프레임워크 등과 관련된 기술 스택과 프로젝트
2. DB 설계
3. Logic을 구현하기 위해 사용한 언어, 기술 등
	시스템 아키텍처: 어떤 기술 스택을 사용했는지, 어떤 구조로 개발 했는지
	API 설계구조: 어떤 로직을 가지고 API 설계를 했는지, 얼마나 효율적이고 안정적인 구조로 개발했는지
	실제로 구현된 서비스 스크린샷: 프로젝트 시스템 아키텍쳐, API 구조,,

- AI/데이터 직군
1. 어떤 데이터, 어떤 모델을 활용했는가?
2. 어떤 머신 러닝 프레임워크를 사용했는가?
3. 데이터 수집(크롤링), 전처리, 분석, 모델링, 시각화 등
4. 논리적으로 근거를 찾는 과정
	데이터 전처리: 데이터 진행에 대한 충분한 논리와 근거 제시
	데이터 분석: 모델의 결과/성능만 보여주는 것이 아닌 최종적으로 선택한 모델을 찾기까지의 과정 설명
	데이터 시각화에서 많이 하는 실수: 한 화면에 너무 많은 정보를 보여주는 것
	데이터 시각화: 보는 사람 입장에서 한 번 더 생각한 시각화 자료를 제시할 것

- 기획 직군
1. 문제 정의
2. 시장 조사와 사용자 요구사항 분석
3. 해결 과정(리서치, 벤치마킹 등)
4. 개설 결과

